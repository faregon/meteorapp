{"version":3,"sources":["users.js"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAGA,OAAO,OAAP,CAAe;;;;;;;;;;;;;;;;;;;AAmBX,uBAAe,MAAf,EAAsB;AAClB,sBAAM,MAAN,EAAc,MAAd;;;;;;;;AAQA,uBAAO,KAAP,CAAa,MAAb,CAAoB,MAApB;AACH,SA7BU;AA8BX,uBAAe,MAAf,EAAuB,SAAvB,EAAiC;AAC7B,sBAAM,MAAN,EAAc,MAAd;AACA,sBAAM,UAAU,IAAhB,EAAsB,MAAtB;AACA,sBAAM,UAAU,KAAhB,EAAuB,MAAvB;AACA,sBAAM,UAAU,QAAhB,EAA0B,MAA1B;;AAEA,oBAAI,CAAC,OAAO,MAAP,EAAL,EAAqB;AACjB,8BAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACH;;;;;;;;;;;AAWD,uBAAO,KAAP,CAAa,MAAb,CAAoB,MAApB,EAA4B,EAAE,MAAM,SAAR,EAA5B;AACH;AAlDU,CAAf","file":"users-compiled.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\n\r\nMeteor.methods({\r\n    //'users.insert'(usersModel){\r\n    //    check(usersModel.name, String);\r\n    //    check(usersModel.email, String);\r\n    //    check(usersModel.password, String);\r\n    //\r\n    //    if( !Meteor.userId()){\r\n    //        throw new Meteor.Error('not-authorized');\r\n    //    }\r\n    //\r\n    //    console.log(usersModel);\r\n    //    Meteor.users.insert({\r\n    //        name: usersModel.name.value,\r\n    //        email: usersModel.email.value,\r\n    //        password: usersModel.password.value,\r\n    //        userId: Meteor.userId()\r\n    //    });\r\n    //\r\n    //},\r\n    'users.remove'(userId){\r\n        check(userId, String);\r\n\r\n        //const user = Meteor.users.findOne(userId);\r\n        //if (article.private && article.owner !== this.userId) {\r\n        // If the task is private, make sure only the owner can delete it\r\n        //throw new Meteor.Error('not-authorized');\r\n        //}\r\n\r\n        Meteor.users.remove(userId);\r\n    },\r\n    'users.update'(userId, userModel){\r\n        check(userId, String);\r\n        check(userModel.name, String);\r\n        check(userModel.email, String);\r\n        check(userModel.password, String);\r\n\r\n        if( !Meteor.userId()){\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        //userModel.lastEdited = new Date();\r\n        //userModel.lastEditedByUser = Meteor.user().username;\r\n\r\n        //const user = Meteor.users.findOne(userId);\r\n        //if (article.private && article.owner !== this.userId) {\r\n        // If the task is private, make sure only the owner can check it off\r\n        //throw new Meteor.Error('not-authorized');\r\n        //}\r\n\r\n        Meteor.users.update(userId, { $set: userModel });\r\n    },\r\n});\r\n\r\n"]}