{"version":3,"sources":["tasks.js"],"names":[],"mappings":";;;AAGA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,MAAM,QAAQ,IAAI,MAAM,UAAV,CAAqB,OAArB,CAAd;;AAEP,IAAI,OAAO,QAAX,EAAqB;;;AAGjB,WAAO,OAAP,CAAe,OAAf,EAAwB,SAAS,gBAAT,GAA4B;AAChD,eAAO,MAAM,IAAN,CAAW;AACd,iBAAK,CACD,EAAE,SAAS,EAAE,KAAK,IAAP,EAAX,EADC,EAED,EAAE,OAAO,KAAK,MAAd,EAFC;AADS,SAAX,CAAP;AAMH,KAPD;AAQH;;AAED,OAAO,OAAP,CAAe;AACX,mBAAe,IAAf,EAAoB;AAChB,cAAM,IAAN,EAAY,MAAZ;;AAEA,YAAI,CAAC,OAAO,MAAP,EAAL,EAAqB;AACjB,kBAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAED,cAAM,MAAN,CAAa;AACT,gBADS;AAET,uBAAW,IAAI,IAAJ,EAFF;AAGT,mBAAO,OAAO,MAAP,EAHE;AAIT,sBAAU,OAAO,IAAP,GAAc;AAJf,SAAb;AAMH,KAdU;AAeX,mBAAe,MAAf,EAAsB;AAClB,cAAM,MAAN,EAAc,MAAd;;AAEA,cAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,YAAI,KAAK,OAAL,IAAgB,KAAK,KAAL,KAAe,KAAK,MAAxC,EAAgD;;AAE5C,kBAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAED,cAAM,MAAN,CAAa,MAAb;AACH,KAzBU;AA0BX,uBAAmB,MAAnB,EAA2B,UAA3B,EAAsC;AAClC,cAAM,MAAN,EAAc,MAAd;AACA,cAAM,UAAN,EAAkB,OAAlB;;AAEA,cAAM,OAAO,MAAM,OAAN,CAAc,MAAd,CAAb;AACA,YAAI,KAAK,OAAL,IAAgB,KAAK,KAAL,KAAe,KAAK,MAAxC,EAAgD;;AAE5C,kBAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACH;;AAED,cAAM,MAAN,CAAa,MAAb,EAAqB,EAAE,MAAM,EAAE,SAAS,UAAX,EAAR,EAArB;AACH;AArCU,CAAf","file":"tasks-compiled.js","sourcesContent":["/**\r\n * Created by D'oh on 4/22/16.\r\n */\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { Mongo } from 'meteor/mongo';\r\nimport { check } from 'meteor/check';\r\n\r\nexport const Tasks = new Mongo.Collection('tasks');\r\n\r\nif (Meteor.isServer) {\r\n    // This code only runs on the server\r\n    // Only publish tasks that are public or belong to the current user\r\n    Meteor.publish('tasks', function tasksPublication() {\r\n        return Tasks.find({\r\n            $or: [\r\n                { private: { $ne: true } },\r\n                { owner: this.userId },\r\n            ],\r\n        });\r\n    });\r\n}\r\n\r\nMeteor.methods({\r\n    'tasks.insert'(text){\r\n        check(text, String);\r\n\r\n        if( !Meteor.userId()){\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.insert({\r\n            text,\r\n            createdAt: new Date(),\r\n            owner: Meteor.userId(),\r\n            username: Meteor.user().username\r\n        });\r\n    },\r\n    'tasks.remove'(taskId){\r\n        check(taskId, String);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n        if (task.private && task.owner !== this.userId) {\r\n            // If the task is private, make sure only the owner can delete it\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.remove(taskId);\r\n    },\r\n    'tasks.setChecked'(taskId, setChecked){\r\n        check(taskId, String);\r\n        check(setChecked, Boolean);\r\n\r\n        const task = Tasks.findOne(taskId);\r\n        if (task.private && task.owner !== this.userId) {\r\n            // If the task is private, make sure only the owner can check it off\r\n            throw new Meteor.Error('not-authorized');\r\n        }\r\n\r\n        Tasks.update(taskId, { $set: { checked: setChecked } });\r\n    },\r\n});"]}